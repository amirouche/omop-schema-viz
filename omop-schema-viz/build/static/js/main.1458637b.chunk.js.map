{"version":3,"sources":["serviceWorker.js","ff.js","index.js"],"names":["Boolean","window","location","hostname","match","pk","args","Array","prototype","slice","call","arguments","length","Router","this","routes","route","undefined","pattern","init","view","startsWith","Error","endsWith","push","app","model","path","document","pathname","split","index","params","transformer","_","msg","component","linkClicked","href","event","a","preventDefault","history","pushState","router","resolve","scrollTo","redirect","scrollup","clean","newModel","Immutable","Object","keys","filter","x","forEach","key","set","routeClean","Title","props","title","React","Component","Input","state","value","nextProps","setState","persist","target","onChange","bind","LogoutClicked","localStorage","removeItem","Link","mc","children","className","onClick","Logout","id","createApp","change","root","render","makeController","controller","then","html","ReactDOM","hash","querySelector","scrollIntoView","createSimpleApp","getElementById","onpopstate","get","token","request","Request","headers","fetch","getToken","getItem","setToken","setItem","post","data","method","body","JSON","stringify","name","ff","myConfig","nodeHighlightBehavior","node","color","size","highlightStrokeColor","link","highlightColor","height","width","onClickGraphNode","schema","xpath","result","evaluate","XPathResult","ANY_TYPE","element","iterateNext","graphInit","param","response","text","parser","DOMParser","parseFromString","append","table","hit","nodes","links","columns","querySelectorAll","getAttribute","symbolType","column","source","Container","fluid","Row","Col","config","onClickNode","homeInit","query","hits","includes","onSubmit","elements","onQueryChange","Hit","badge","tagName","Badge","variant","map","Form","Group","Label","Control","type","placeholder","Text","Button","referenceInit","Header","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Column","remarks","maybeIndex","maybePkIndex","IndexColumn","ascending","Index","unique","Card","Body","Table","indices","tables","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1458637b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* MIT License\n *\n * Copyright (c) 2019-2020 Amirouche <amirouche.boubekki@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE. */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Immutable from 'seamless-immutable';\n\n\n/**\n * Neat debug function\n */\nlet pk = function() {\n    let args = Array.prototype.slice.call(arguments);\n    if (process.env.NODE_ENV !== 'production') {\n        console.log.apply(console, args);\n    }\n    return args[args.length - 1];\n}\n\n/**\n * Create base app environment\n *\n * This is useful in context where you do not plan to have\n * a router or websockets\n *\n * @param {app} can be any JavaScript Object it's passed around\n *              the environment. Things that can not be serialized.\n *              It's not required to be immutable.\n * @param {root} is DOM node that is used to render the graphical\n *               part of the application\n * @param {init} is function that must return the seed model.\n *               It usually return an immutable object.\n * @param {view} is a function that takes as argument `app` and\n *               the current `model` and `makeController` usually\n *               simply called `mc`.\n * @returns {Function} called `change` that allows to sneak into\n *                     the application environment from the outside.\n *                     It's useful to extend the behavior of forward.\n */\nlet createSimpleApp = function(app, root, init, view) {\n    let model = init();\n\n    // TODO: bring back spawn function\n\n    let render;\n\n    /* wraps event handlers to create controllers.\n\n       The returned function will use the function returned\n       by the controller to update the model and trigger a render\n       if needed.\n     */\n    let makeController = function(controller) {\n        return function(event) {\n            let promise = controller(app, model, event);\n            promise.then(function(transformer) {\n                // XXX: if the controller returns nothing\n                // this will lead to an 'undefined' error\n                // which is not very friendly.\n                let newModel = transformer();\n                model = newModel;  // XXX: side effect\n                render();\n            });\n        }\n    };\n\n    /* Render the application */\n    render = function() {\n        let html = view(model, makeController);\n        ReactDOM.render(html, root);\n        if (document.location.hash !== '') {\n            // XXX: quick fix to make http://foobar/#hash work\n            // it might not always be what we want.\n            let target = document.querySelector(document.location.hash);\n            target.scrollIntoView();\n        }\n    };\n\n    // sneak into an application from the outside.\n    return function(change) {\n        let promise = change(app, model);\n        promise.then(function(transformer) {\n            if(transformer) {\n                let newModel = transformer();\n                model = newModel;  // XXX: side effect\n                render();\n            }\n        });\n    };\n};\n\n/* URL Router */\n\nlet Router = class {\n    constructor() {\n        this.routes = [];\n        this.route = undefined;\n    }\n\n    append(pattern, init, view) {\n        if(!pattern.startsWith('/')) {\n            throw new Error(\"Pattern must start with a /\");\n        }\n        if(!pattern.endsWith('/')) {\n            throw new Error(\"Pattern must end with a /\");\n        }\n\n        this.routes.push({pattern: pattern, init:init, view: view});\n    }\n\n    async resolve(app, model) {\n        pk('resolving route...');\n        let path = document.location.pathname.split('/');\n        let match, params;\n\n        for(let index=0; index<this.routes.length; index++) {\n            let route = this.routes[index];\n            [match, params] = this.match(route, path);\n\n            if (match) {\n                this.route = route;\n                pk('router matched route', route)\n                let transformer = await route.init(app, model, params);\n                // eslint-disable-next-line\n                return _ => transformer();\n            }\n        }\n\n        // FIXME: replace with 404 error page\n        let msg = 'no matching route found!';\n        pk(msg);\n        // silenced by reactjs?!\n        throw new Error(msg);\n    }\n\n    match(route, path) {\n        // FIXME: do that at init time\n        let pattern = route.pattern.split(\"/\");\n\n        // fast path: if pattern and path are not the same length\n        // they can not match\n        if (pattern.length !== path.length) {\n            return [false, {}];\n        }\n\n        // try to match\n        let params = {};\n        for (var index=0; index < pattern.length; index++) {\n            let component = pattern[index];\n            if (component.startsWith('{') && component.endsWith('}')) {\n                params[component.slice(1, -1)] = path[index];\n            } else if (component !== path[index]) {\n                return [false, {}]\n            } else {\n                continue;\n            }\n        }\n\n        return [true, params];\n    }\n}\n\n/**\n * Create the app, run the app and return a function that allows\n * to sneak into it. The application will mounted on an html\n * element which has \"root\" as id. The initial model will be\n * an Immutable JS Object.\n *\n * @param {router} a Router instance.\n * @returns {Function} a function that allows to sneak into the app closure\n *          from the outside world.\n */\nlet createApp = function(router) {\n    let app = {router: router};\n\n    // prepare createSimpleApp arguments\n    let root = document.getElementById(\"root\");\n    let init = function() { return Immutable({}); };\n    let view = function(model, mc) {\n        return router.route.view(model, mc);\n    };\n\n    let change = createSimpleApp(app, root, init, view);\n\n    window.onpopstate = function(event) {\n        return change(router.resolve.bind(router));\n    };\n\n    pk('initial rendering');\n    change(router.resolve.bind(router));\n\n    return change;\n}\n\nlet linkClicked = function(href) {\n    return function(app, model) {\n        return async function(event) {\n            event.preventDefault();\n            window.history.pushState({}, \"\", href);\n            let transformer = app.router.resolve(app, model);\n            window.scrollTo(0, 0);\n            return transformer;\n        }\n    }\n}\n\nlet redirect = async function(app, model, href, scrollup) {\n    pk('redirecting...', app, model, href);\n    window.history.pushState({}, \"\", href);\n    let transformer = await app.router.resolve(app, model);\n    if (scrollup || scrollup === undefined) {\n        window.scrollTo(0, 0);\n    }\n    return transformer;\n}\n\nlet Link = function({mc, href, children, className}) {\n    return <a href={href} onClick={mc(linkClicked(href))} className={className}>{children}</a>;\n}\n\nlet clean = function(model) {\n    let newModel = Immutable({});\n    // only keep things that start with %\n    Object.keys(model)\n          .filter((x) => x.startsWith('%'))\n          .forEach(function(key) {\n              newModel = newModel.set(key, model[key]);  // XXX: side-effect\n          });\n    return newModel;\n}\n\n\nlet routeClean = async function(app, model) {\n    return (app, model) => clean(model);\n}\n\nlet set = function(name) {\n    return function(app, model) {\n        return async function (event) {\n            let value = event.target.value;\n            return (app, model) => model.set(name, value);\n        }\n    }\n}\n\nclass Title extends React.Component {\n    constructor(props) {\n        super(props);\n        this.title = props.title;\n    }\n\n    componentDidMount() {\n        document.title = this.props.title;\n    }\n\n    componentDidUpdate() {\n        document.title = this.props.title;\n    }\n\n    render() {\n        // FIXME: with react 16 is not required to return something\n        return <div/>;\n    }\n}\n\n\n// ref: https://github.com/facebook/react/issues/955\nclass Input extends React.Component {\n    constructor(props, ...args) {\n        super(props, ...args);\n        this.state = { value: props.value || \"\" };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.value !== nextProps.value) {\n            this.setState({ value: nextProps.value });\n        }\n    }\n\n    onChange(event) {\n        event.persist();\n        // TODO: do something else when this.props.onChange is not set\n        this.setState({ value: event.target.value }, () => this.props.onChange(event));\n    }\n\n    render() {\n        return (<input {...this.props} {...this.state} onChange={this.onChange.bind(this)} />);\n    }\n}\n\n\nlet get = function(path, token) {\n    let request = new Request(path);\n    if (token) {\n        request.headers.set('X-AUTH-TOKEN', token)\n    }\n    return fetch(request);\n}\n\nlet post = function(path, data, token) {\n    let request = new Request(path, {method: 'POST', body: JSON.stringify(data)});\n    if (token) {\n        request.headers.set('X-AUTH-TOKEN', token);\n    }\n    return fetch(request);\n}\n\n/**\n *  Get the auth token from the model or localStorage\n */\nlet getToken = function(model) {\n    return model['%token'] || window.localStorage.getItem('%token');\n}\n\nlet setToken = function(token) {\n    window.localStorage.setItem('%token', token);\n}\n\nlet LogoutClicked = function(app, model) {\n    return async function(event) {\n        window.localStorage.removeItem('%token');\n        return await redirect(app, model, '/');\n    }\n}\n\nlet Logout = function({mc}) {\n    return <span id=\"logout\" onClick={mc(LogoutClicked)}>Logout</span>;\n}\n\nexport default {\n    Immutable,\n    Link,\n    Logout,\n    Router,\n    Title,\n    clean,\n    createApp,\n    get,\n    getToken,\n    setToken,\n    pk,\n    post,\n    redirect,\n    set,\n    routeClean,\n    Input,\n};\n","import React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Badge, Card, Container, Row, Col, Navbar, Nav, Form, Button} from 'react-bootstrap';\nimport ff from './ff.js';\nimport ReactMarkdown from 'react-markdown';\nimport { Graph } from 'react-d3-graph';\n\n\nlet router = new ff.Router()\n\n// graph\n\n// the graph configuration, you only need to pass down properties\n// that you want to override, otherwise default ones will be used\nlet myConfig = {\n    nodeHighlightBehavior: true,\n    node: {\n        color: 'lightgreen',\n        size: 120,\n        highlightStrokeColor: 'blue'\n    },\n    link: {\n        highlightColor: 'lightblue'\n    },\n    height: 768,\n    width: 1024\n};\n\nlet onClickGraphNode = async function(app, model, event) {\n\n    let schema = model.schema;\n    let xpath = `//*[@name=\"${event}\"]`;\n\n    let result = schema.evaluate(xpath, schema, null, XPathResult.ANY_TYPE, null);\n\n    let element = result.iterateNext();\n\n    model = {schema:schema, element: element};\n\n    return () => model;\n};\n\nlet graphInit = async function(app, model, param) {\n    let response = await ff.get(\"/schema.xml\");\n    let text = await response.text()\n    let parser = new DOMParser();\n    let schema = parser.parseFromString(text, \"application/xml\");\n\n    let newModel = {schema: schema, element: undefined};\n\n    return () => newModel;\n}\n\nlet graphView = function(model, mc) {\n    let schema = model.schema;\n    let element = model.element;\n    let data = {nodes: [], links: []};\n\n    let table;\n    let result = schema.evaluate( '//table', schema, null, XPathResult.ANY_TYPE, null);\n    while(table = result.iterateNext()) {\n        let columns = table.querySelectorAll(':scope > column');\n        table = table.getAttribute(\"name\");\n        data.nodes.push({id: table, symbolType: \"diamond\", size: 150, color: \"red\"});\n\n        for (let column of columns) {\n            column = column.getAttribute(\"name\");\n            data.nodes.push({id: column});\n            data.links.push({source: table, target: column});\n        }\n    }\n\n    let hit;\n    if (element !== undefined) {\n        hit = <Hit element={element} mc={mc} />;\n    } else {\n        hit = <p>Select a node</p>;\n    }\n\n    return (\n        <>\n            <Header />\n            <Container fluid>\n                <Row>\n                    <Col>\n                        <Graph id=\"graph-id\"\n                               data={data}\n                               config={myConfig}\n                               onClickNode={mc(onClickGraphNode)}\n                        />\n                    </Col>\n                    <Col>\n                        { hit }\n                    </Col>\n                </Row>\n            </Container>\n        </>\n\n    );\n};\n\nrouter.append('/graph/', graphInit, graphView)\n\n// home\n\nlet homeInit = async function() {\n    let response = await ff.get(\"/schema.xml\");\n    let text = await response.text()\n    let parser = new DOMParser();\n    let schema = parser.parseFromString(text, \"application/xml\");\n\n    let newModel = {schema: schema, query: \"\", hits: []};\n\n    return () => newModel;\n}\n\n\nlet match = function(element, query) {\n    let remarks = element.getAttribute('remarks');\n    return remarks.includes(query);\n}\n\nlet onSubmit = async function(app, model, event) {\n    event.preventDefault();\n    let schema = model.schema;\n    let query = model.query;\n    let element;\n    let elements = [];\n\n    let result = schema.evaluate( '//table', schema, null, XPathResult.ANY_TYPE, null);\n    while(element = result.iterateNext()) {\n        elements.push(element);\n    }\n\n    result = schema.evaluate( '//table/column', schema, null, XPathResult.ANY_TYPE, null);\n    while(element = result.iterateNext()) {\n        elements.push(element);\n    }\n\n    let hits = elements.filter(element => match(element, query));\n\n    model.hits = hits;\n\n    return () => model;\n}\n\nlet onQueryChange = async function(app, model, event) {\n    model.query = event.target.value;\n    return () => model;\n}\n\nlet Hit = function({element, mc}) {\n    let badge;\n    if(element.tagName === \"table\") {\n        badge = <Badge variant=\"primary\">Table</Badge>;\n    } else if (element.tagName === \"column\") {\n        badge = <Badge variant=\"secondary\">Column</Badge>;\n    }\n\n    let name = element.getAttribute('name');\n\n    return (\n        <div>{badge} <ff.Link mc={mc} href={\"/reference/#\" + name}>{name}</ff.Link> <small className=\"text-muted\">{element.getAttribute(\"remarks\")}</small></div>\n    )\n}\n\nlet homeView = function(model, mc) {\n    let query = model.query;\n    let hits = model.hits.map(element => <Hit element={element} mc={mc} />);\n\n    return (\n        <>\n            <Header/>\n            <Container>\n                <Row>\n                    <Col>\n                        <Form onSubmit={mc(onSubmit)}>\n                            <Form.Group>\n                                <Form.Label>Recherche</Form.Label>\n                                <Form.Control type=\"text\"\n                                              placeholder=\"filtre\"\n                                              value={query}\n                                              onChange={mc(onQueryChange)}\n                                />\n                                <Form.Text className=\"text-muted\">\n                                    Filtrer les tables ou colonnes.\n                                </Form.Text>\n                            </Form.Group>\n\n                            <Button variant=\"primary\" type=\"submit\">\n                                Submit\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n                {hits}\n            </Container>\n        </>\n    );\n}\n\nrouter.append('/', homeInit, homeView)\n\n// reference\n\nlet referenceInit = async function() {\n    let response = await ff.get(\"/schema.xml\");\n    let text = await response.text()\n    let parser = new DOMParser();\n    let schema = parser.parseFromString(text, \"application/xml\");\n\n    let newModel = {schema: schema};\n\n    return (app, model) => newModel;\n}\n\nlet Header = function() {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"/\">omop-schema-viz</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"/\">Home</Nav.Link>\n                    <Nav.Link href=\"/reference/\">Reference</Nav.Link>\n                    <Nav.Link href=\"/graph/\">Graph</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n\n\nlet maybePkIndex = function(pk, name) {\n    for (let element of pk) {\n        if (element.getAttribute('column') === name) {\n            return element.getAttribute('sequenceNumberInPK');\n        }\n    }\n    return false;\n}\n\n\nlet Column = function({column, pk}) {\n    let name = column.getAttribute('name');\n    let remarks = column.getAttribute('remarks');\n    let maybeIndex = maybePkIndex(pk, name);\n\n    if (maybeIndex) {\n        pk = <Badge variant=\"info\" title=\"sequence number in primary key\">{ maybeIndex }</Badge>\n    } else {\n        pk = \"\";\n    }\n\n    return (\n        <div>\n            <h3 id={name}><Badge variant=\"secondary\">Column</Badge> {pk} {name}</h3>\n            <ReactMarkdown source={remarks} />\n        </div>\n    );\n}\n\n\nlet IndexColumn = function({column}) {\n    let name = column.getAttribute('name');\n    let ascending;\n\n    if (column.getAttribute('ascending') === \"true\") {\n        ascending = <Badge variant=\"success\">ascending</Badge>;\n    } else {\n        ascending = <Badge variant=\"danger\">descending</Badge>;\n    }\n\n    return <li>{name} {ascending}</li>\n}\n\n\nlet Index = function({index}) {\n    let name = index.getAttribute('name');\n    let unique;\n    if (index.getAttribute('unique') === \"true\") {\n        unique = <Badge variant=\"warning\">unique</Badge>;\n    } else {\n        unique = \"\";\n    }\n\n    let columns = Array.prototype.slice.call(index.querySelectorAll(':scope > column'));\n\n    return (\n        <Card>\n            <Card.Body>\n                <div>\n                    <h4><Badge variant=\"success\">Index</Badge> {unique} {name}</h4>\n                    <ul>\n                        {columns.map(column => <IndexColumn key={column.getAttribute(\"name\")}\n                                                            column={column} />)}\n                    </ul>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n}\n\n\n\n\nlet Table = function({table}) {\n    let name = table.getAttribute('name');\n    let remarks = table.getAttribute('remarks');\n    let columns = Array.prototype.slice.call(table.querySelectorAll(':scope > column'));\n    let indices = Array.prototype.slice.call(table.querySelectorAll(':scope > index'));\n    let pk = Array.prototype.slice.call(table.querySelectorAll(':scope > primaryKey'));\n\n    return (\n        <Container fluid=\"md\">\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h2 id={name}><Badge variant=\"primary\">Table</Badge> {name}</h2>\n                            <ReactMarkdown source={remarks} />\n                            {columns.map(column => <Column key={column.getAttribute(\"name\")}\n                                                           column={column} pk={pk} />)}\n                            {indices.map(index => <Index key={index.getAttribute(\"name\")} index={index} />)}\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\n\nlet referenceView = function(model, mc) {\n    let schema = model.schema;\n    let result = schema.evaluate( '//table', schema, null, XPathResult.ANY_TYPE, null);\n    let tables = [];\n    let table;\n\n    while(table = result.iterateNext()) {\n        tables.push(table);\n    }\n\n    return (\n        <>\n            <Header/>\n            {tables.map(table => <Table key={table.getAttribute('name')}\n                                        table={table}></Table>)}\n        </>\n    )\n}\n\nrouter.append('/reference/', referenceInit, referenceView)\n\nff.createApp(router);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}